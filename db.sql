CREATE TABLE public.orders (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  type text NOT NULL, --  delivery or pickup
  data jsonb NULL,
  CONSTRAINT orders_pkey PRIMARY KEY (id)
) TABLESPACE pg_default;

CREATE TABLE public.orders_actions (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  order_id bigint NULL,
  action text NULL,
  CONSTRAINT orders_actions_pkey PRIMARY KEY (id),
  CONSTRAINT orders_actions_order_id_fkey FOREIGN KEY (order_id) REFERENCES orders(id)
) TABLESPACE pg_default;

CREATE TABLE public.messages (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  order_id bigint NULL,
  data jsonb NULL,
  sender_id uuid NOT NULL,
  reciever_id uuid NOT NULL,
  CONSTRAINT messages_pkey PRIMARY KEY (id),
  CONSTRAINT messages_order_id_fkey FOREIGN KEY (order_id) REFERENCES orders(id),
  CONSTRAINT messages_reciever_id_fkey FOREIGN KEY (reciever_id) REFERENCES users(auth_id),
  CONSTRAINT messages_sender_id_fkey FOREIGN KEY (sender_id) REFERENCES users(auth_id)
) TABLESPACE pg_default;

CREATE TABLE public.users (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  auth_id uuid NULL,
  telegram_id bigint NOT NULL,
  username text NULL,
  first_name text NULL,
  last_name text NULL,
  avatar_url text NULL,
  created_at timestamp without time zone NULL DEFAULT now(),
  meta jsonb NULL,
  CONSTRAINT users_pkey PRIMARY KEY (id),
  CONSTRAINT users_auth_id_key UNIQUE (auth_id),
  CONSTRAINT users_telegram_id_key UNIQUE (telegram_id),
  CONSTRAINT users_auth_id_fkey FOREIGN KEY (auth_id) REFERENCES auth.users(id) ON DELETE CASCADE
) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON public.users USING btree (telegram_id) TABLESPACE pg_default;

CREATE TABLE public.users_to_orders (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  customer_id uuid NOT NULL,
  courier_id uuid NOT NULL,
  order_id bigint NOT NULL,
  CONSTRAINT users_to_orders_pkey PRIMARY KEY (id),
  CONSTRAINT users_to_orders_courier_id_fkey FOREIGN KEY (courier_id) REFERENCES users(auth_id),
  CONSTRAINT users_to_orders_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES users(auth_id),
  CONSTRAINT users_to_orders_order_id_fkey FOREIGN KEY (order_id) REFERENCES orders(id)
) TABLESPACE pg_default;

create table public.cargo_types (
  id bigint generated by default as identity not null,
  name_en text null,
  name_ru text null,
  constraint cargo_types_pkey primary key (id)
) TABLESPACE pg_default;

create table public.tariffs (
  id bigint generated by default as identity not null,
  name_en text null,
  name_ru text null,
  weight_deps boolean null default true,
  constraint tariffs_pkey primary key (id)
) TABLESPACE pg_default;

create table public.tarrifs_prices (
  id bigint generated by default as identity not null,
  start_date timestamp with time zone not null,
  price_usd numeric null,
  price_zar numeric null,
  tariff_id bigint null,
  constraint tarrifs_prices_pkey primary key (id),
  constraint tarrifs_prices_tariff_id_fkey foreign KEY (tariff_id) references tariffs (id)
) TABLESPACE pg_default;

create view public.orders_full as
select
  o.id as order_id,
  o.data,
  o.type,
  uto.customer_id,
  uto.courier_id,
  oa.id as action_id,
  oa.action,
  o.created_at,
  oa.created_at as updated_at
from
  orders o
  join orders_actions oa on o.id = oa.order_id
  join users_to_orders uto on o.id = uto.order_id
  join (
    select
      orders_actions.order_id,
      max(orders_actions.created_at) as latest_update
    from
      orders_actions
    group by
      orders_actions.order_id
  ) latest on oa.order_id = latest.order_id
  and oa.created_at = latest.latest_update;

CREATE TRIGGER new_order_created_status
AFTER INSERT ON orders
FOR EACH ROW
EXECUTE FUNCTION add_created_status();

CREATE OR REPLACE FUNCTION add_created_status()
RETURNS trigger AS $$
BEGIN
    INSERT INTO orders_actions (order_id, action)
    VALUES (NEW.id, 'created');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

create table public.cities (
  id bigint generated by default as identity not null,
  name_ru text not null,
  name_en text null,
  country_ru text null,
  country_en text null,
  country_code character varying null,
  lat numeric null,
  lon numeric null,
  population bigint null,
  constraint cities_pkey primary key (id),
  constraint cities_id_key unique (id)
) TABLESPACE pg_default;

drop function search_cities;
create or replace function search_cities(search_query text)
returns table (
  id bigint,
  city_ru text,
  city_en text,
  country_code varchar
) as $$
begin
  return query
  select 
    c.id,
    c.name_ru || ', ' || c.country_ru as city_ru,
    c.name_en || ', ' || c.country_en as city_en,
    c.country_code
  from cities c
  where 
    c.name_ru ilike search_query || '%'
    or c.name_en ilike search_query || '%'
    order by c.population desc;
end;
$$ language plpgsql;